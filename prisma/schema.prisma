generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id           String           @id @default(cuid())
  whatsappId   String           @unique // WaId from Twilio
  name         String?          // ProfileName from Twilio
  phone        String           @unique // From number without "whatsapp:" prefix
  appointments Appointment[]
  slots        Slot[]
  adminId      String?
  admin        Admin?           @relation(fields: [adminId], references: [id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Admin {
  id             String           @id @default(cuid())
  name           String
  mobileNo       String[]           // Changed from String[]
  email          String
  whatsapp_id    String?
  uniqueName     String?          @unique
  appointments   Appointment[]
  user           User[]
  slots          Slot[]
  day            Day[]
  payments       Payment[]
  shift          Shift[]
  adminAvailability AdminAvailability[]
  created_at     DateTime         @default(now())
}

model Appointment {
  id        String   @id @default(cuid())
  time      String
  date      DateTime
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  status    String    @default("PENDING") // PENDING, CONFIRMED, CANCELLED
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  adminId   String?   
  admin     Admin?    @relation(fields: [adminId], references: [id]) // Fixed case
  slotId    String?
  slot      Slot?     @relation(fields: [slotId], references: [id])
  @@index([userId])
  @@index([date])
}


model AdminAvailability {
  id        String   @id @default(cuid()) @unique
  adminId   String
  dayOfWeek Int      // Represent days as 0 (Sunday) to 6 (Saturday)
  startTime String   // Store time in 24-hour format, e.g., "09:00"
  endTime   String   // Store time in 24-hour format, e.g., "17:00"
  timeSlots String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@unique([adminId, dayOfWeek])
}

model Slot {
  id          String      @id @default(cuid())
  adminId     String
  admin       Admin    @relation(fields: [adminId], references: [id])
  day         String
  startTime   DateTime
  endTime     DateTime
  date        DateTime?
  isBooked    Boolean  @default(false)
  userId      String?     // If booked, reference the user
  user        User?     @relation(fields: [userId], references: [id])
  appointment Appointment[]
}

model Config {
  id        String   @id @default(cuid())
  day       String   @unique // e.g., "Monday"
  startTime String   // e.g., "09:00"
  endTime   String   // e.g., "17:00"
  interval  Int      // Time interval in minutes (e.g., 30)
}


model Plan {
  id          String   @id @default(uuid()) // Unique identifier
  name        String   // Plan name (e.g., Basic, Pro, Enterprise)
  price       Int      // Plan price in INR (e.g., 999, 1999)
  description String   // Description of the plan
  features    String[] // List of features (stored as an array)
  createdAt   DateTime @default(now()) // Plan creation timestamp
  updatedAt   DateTime @updatedAt
  payments    Payment[] // One-to-many relationship with payments
}

model Payment {
  id              String   @id @default(uuid()) // Unique identifier
  orderId         String   @unique // Razorpay order ID
  paymentId       String?  // Razorpay payment ID (null if payment failed)
  signature       String?  // Razorpay signature for verification
  amount          Int      // Amount paid in INR (e.g., 999, 1999)
  currency        String   @default("INR") // Payment currency
  status          String   // Payment status (e.g., "success", "failed")
  customerName    String   // Customer's name
  customerEmail   String?   // Customer's email
  customerContact String?  // Customer's contact number
  adminId         String
  admin           Admin    @relation(fields: [adminId], references: [id])
  planId          String   // Foreign key to Plan
  plan            Plan     @relation(fields: [planId], references: [id])
  createdAt       DateTime @default(now()) // Payment creation timestamp
}

model TimeSlot {
  id        String  @id @default(uuid())
  start     String
  end       String
  day       String
  
}

model Day {
  id     Int       @id @default(autoincrement())
  name   String    @unique // For the day, like 'Monday', 'Tuesday', etc.
  shift  Shift[]    // Each day can have multiple time slots
  adminId String
  admin  Admin     @relation(fields: [adminId], references: [id])

  @@unique([name, adminId])
}

model Shift {
  id       Int    @id @default(autoincrement())
  start    String // Start time of the slot
  end      String // End time of the slot
  dayId    Int    // Foreign key to reference the Day model
  day      Day    @relation(fields: [dayId], references: [id]) // Relating the Slot to Day
  adminId  String
  admin    Admin  @relation(fields: [adminId], references: [id])
}
