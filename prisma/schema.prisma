generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id           String           @id @default(cuid())
  whatsappId   String           @unique // WaId from Twilio
  name         String?          // ProfileName from Twilio
  phone        String           @unique // From number without "whatsapp:" prefix
  appointments Appointment[]
  adminId      String?
  admin        Admin?           @relation(fields: [adminId], references: [id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Admin {
  id             String           @id @default(cuid())
  name           String
  mobileNo       String[]           // Changed from String[]
  email          String
  whatsapp_id    String?
  uniqueName     String?          @unique
  appointments   Appointment[]
  user           User[]
  slots          Slot[]
  adminAvailability AdminAvailability[]
  created_at     DateTime         @default(now())
}

model Appointment {
  id        String   @id @default(cuid())
  time      String
  date      DateTime
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  status    String    @default("PENDING") // PENDING, CONFIRMED, CANCELLED
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  adminId   String?   
  admin     Admin?    @relation(fields: [adminId], references: [id]) // Fixed case

  @@index([userId])
  @@index([date])
}


model AdminAvailability {
  id        String   @id @default(cuid()) @unique
  adminId   String
  dayOfWeek Int      // Represent days as 0 (Sunday) to 6 (Saturday)
  startTime String   // Store time in 24-hour format, e.g., "09:00"
  endTime   String   // Store time in 24-hour format, e.g., "17:00"
  timeSlots String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@unique([adminId, dayOfWeek])
}

model Slot {
  id          String      @id @default(cuid())
  adminId     String
  admin       Admin    @relation(fields: [adminId], references: [id])
  startTime   DateTime
  endTime     DateTime
  isBooked    Boolean  @default(false)
  userId      String?     // If booked, reference the user
}